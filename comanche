#!/usr/bin/perl

###############################################
##      Create by boulangc and deconind      ##
###############################################


# Handler sur la mort des fils
$SIG{CHLD} = sub {
    $child = wait();
    deleteChild($child);
};


# Handler de terminaison du programme
$SIG{'QUIT'} = sub {
	writelog("stop");
    unlink 'pid';
	close( SOCKET );
	exit 0;
};

# Handler de statut du programme (afficher le PID du processus principal)
$SIG{'USR1'} = sub { 
	open (PID, "pid");
	while (<PID>)
	{
		print STDOUT "PID du processur principal $_\n";
	}
	close(PID);
    my $fils = @allPID;
	print STDOUT "Nombre de requêtes reçues : $reqRecues.\nNombre de requêtes traitées: $reqTraitees.\nIl y a $fils clients\n Les PID: @allPID\n";
};

$SIG{'USR2'} = sub { 
	defConfig();
};

use Socket;
use File::MimeInfo;

$reqRecues      = 0;
$reqTraitees    = 0;


# Test sur le parametre
if( $ARGV[0] eq "start" ) {
	
	# Si lancement du serveur
	$pid = fork();
	if( defined $pid && $pid != 0 ) {
		open( PID, ">pid" );
		print PID $pid;
		close( PID );
		exit 0;
	}
} elsif ( $ARGV[0] eq "stop" ) {
	
	# Si arrêt du serveur
	open( PID, "pid" );
	kill( 'QUIT', <PID> );
	close( PID );

	exit 0;
} elsif ( $ARGV[0] eq "status" ) {
    
    # Si demande de statut
    open( PID, "pid" );
	kill( 'USR1', <PID> );
    close( PID );
    
	exit O;
} elsif ( $ARGV[0] eq "reload" ) {
	
	# Si demande de rechargement de la configuration
    open( PID, "pid" );
	kill( 'USR2', <PID> );
    close( PID );
    
	exit 0;
} else {
	
	# Si pas d'argument
	exit 1;
}

# Lecture du fichier de configuration
defConfig();

# Creation du logfile si aucun
open( LOG, ">>$logfile" );
close( LOG );


###############################################
##               Code principal              ##
###############################################


# Initialisation du serveur
socket( SOCKET, PF_INET, SOCK_STREAM, getprotobyname( 'tcp' ) );
setsockopt( SOCKET, SOL_SOCKET, SO_REUSEADDR, 1 ) || die( 'setsockopt' );

$addr = sockaddr_in ($port, INADDR_ANY);


# Lancement du serveur
bind( SOCKET, $addr ) || die( 'bind' );
listen( SOCKET, SOMAXCONN ) || die( 'listen' );


# Ecriture du demarrage dans le log
writelog("start");


# Boucle principale du serveur
while( 1 ) {
    accept( CLIENT, SOCKET ) or next;
	$reqRecues  ++;

	# Test du nombre de fils
    $fils = @allPID;
	if ( $fils >= $clients ) {
		$reponse =  "<html><body>".
		            "<h3>503 Service Unavailable</h3>".
		            "Trop de connexions en simultannees".
		            "</body></html>";
        resp( "text/html", "503 Service Unavailable" );
        writelog("get-s", "", "", "error", "503 Service Unavailable");
		
	    print CLIENT $full_response;
	
        close( CLIENT );
	} else {
        $reqTraitees ++;

	    # Creation d'un fils pour le client
        $pid = fork();
	    push( @allPID, $pid );
        
        if( $pid != 0 ) {
            
            close( CLIENT );
        } else {
		
		    # Traitement du client par le fils
		    
		    $client = getpeername(CLIENT);
		    open( STDERR, ">/dev/null" );
            ( $port, $iaddr ) = sockaddr_in( $client );
            $ip = inet_ntoa( $iaddr );
		
            select CLIENT;
            $|= 1;
		
		    $request = <CLIENT>;
                    
		    chop $request;
		    chop $request;
		    $request =~ /^GET (.*) HTTP\/1\.1/ || err400;
		
            $req = $1;
            $req =~ /(.*)\?(.*)/;
            $req = $2;
            @param = split("&", $req);
            for $p ( @param ) {
                $p =~ /.*=(.*)/;
                $parameter .= " $1";
            }
	
            $req = $1;
            $c = chop $req;
            $req .= $c if( $c ne "/" );
            
			if( exists $conf{"route"}{$req} ) {
				$req = $conf{"route"}{$req};
				traiterFichier();
			} elsif ( exists $conf{"exec"}{$req} ) {
				$req = $conf{"exec"}{$req};
				respExec($req);
			} else {
				traiterFichier();
			}

		
		    print $full_response;
		
	        close( CLIENT );
		    exit 0;
		
	    }
	
    }
}


###############################################
##    Fonction de lecture du fichier conf    ##
###############################################


sub defConfig
{
    open(CONFIG,"comanche.conf");
    undef %conf;
    while (<CONFIG>) {

	    # récupération des routes dans la liste route
	    if( /route/ ) {
	        @lignes = split(" ",$_);
	        $conf{"route"}{$lignes[1]} = $lignes[3];
	    }
	    
	    # récuperation des executions dans la liste exe
	    if( /exec/ ) {
	        @lignes = split(" ",$_);
	        $conf{"exec"}{$lignes[1]} = $lignes[3];
	    }
        
        # récuperation des variables
	    if( /^set\s+(.+)\s+(.+)/ ) {
	        if( $1 eq "port" ) {
	            die( "Port incorrect dans le .conf\n" ) unless ( $2 >= 1 && $2<=65535 );
	        } elsif( $1 eq "default" ) {
	            die( "Le fichier par défaut dans le .conf n'existe pas.\n" ) unless ( -f $2 );
	        }
	        ${$1}= $2;
	    } 
    }
    
    close(CONFIG);
}


###############################################
##  Fonction d'écriture dans le fichier log  ##
###############################################


sub writelog
{
	my ($mode) = @_;
	if( $mode eq "start" or $mode eq "stop" ) {
		
		# Si lancement ou fermeture du serveur
		$date = time;
		$machine = "local";
		$type = $mode;
		$requete = $port;
		$projection = "";
		$reponse = "";
	} else {
	    $date = time;
	    $machine = shift;
	    $type = shift;
	    $requete = shift;
	    $projection = shift;
	    $reponse = shift;
	}
	
	# Ecriture dans le log
	my $line = "$date;$type;$machine;$requete;$projection;$reponse\n";
	open( LOG, ">>$logfile" );
	print LOG $line;
	close( LOG );
}


###############################################
##    Fonction de traitement de la requete   ##
###############################################


sub traiterFichier {
    # Recherche dans le repertoire de base
    $req =~ /.*\.(.*)/;
    
	if( -f $req ) {
		$type = mimetype($req);
		respFile($req, $type, "200 OK");
	} elsif( -d $req ) {
		if( -f $req."/".$index ) {
			respFile( $req."/".$index, "text/html", "200 OK");
		} else {
			respListFile($req);
		}
	} elsif( -x $req ) {
		respExec($req);
	} else {
	    if( -f $basedir.$req ) {
	        
	        # Si un fichier correspond
	        $type = mimetype($req);
	        respFile($basedir.$req, $type, "200 OK");
	    } elsif( -d $basedir.$req ) {
	        if( -f $basedir.$req."/".$index ) {
	            
	            # Si il y a un fichier index.html dans le dossier
	            respFile( $basedir.$req."/".$index, "text/html", "200 OK");
	        } else {
	            
	            # Sinon
	            respListFile($basedir.$req);
	        }
	    } elsif( -x $basedir.$req ) {
	        respExec($basedir.$req);
	    } else {
	        err404();
		}
	}
}


###############################################
##           Fonctions de réponses           ##
###############################################


# Retourne un page d'erreur 400
sub err400
{
    $reponse =  "<html><body>".
                "<h3>400 Bad Request</h3>".
                "Votre requête n'est pas valide".
                "</body></html>";
    resp("400 Bad Request", "text/html");
    writelog("get-s", $ip, $request, "error", "400 Bad Request");
}

# Retourne la page de base en erreur 404
sub err404
{
    respFile($default, "text/html", "404 Not Found");
}

# Crée une page répertoriant le contenu d'un dossier
# param :
#   - path
sub respListFile
{
    $dir = shift;
    
    $reponse =  "<html><head><link rel='stylesheet' /></head><body>".
                "<h2>$dir</h2>".
                "<ul>";
    
    opendir( REP, $dir );
    for $f ( sort readdir( REP ) ) {
        $path = "$dir\/$f";
        if( -d $path ) {
            $class = " class='dossier' ";
        } else {
            $class = "";
        }
        $reponse .= "<li $class><a $class href='$path'>$f</a></li>";
    }
    
    $reponse .= "</ul>".
                "</body></html>";
    resp( "200 OK", "text/html" );
    writelog("get-s", $ip, $request, $basedir.$req, "200 OK");
}

# Exécute un script
# param :
#   - file to exec
sub respExec {
    $file = shift;
    $reponse = "<html><body>".qx/$file$parameter/."</body></html>";
    resp( "200 OK", "text/html" );
    writelog("get-d", $ip, $request, $file, "200 OK");
}

# Lit un fichier
# param :
#   - file full path
#   - http status
sub respFile
{
    $file = shift;
    open(FILE, $file);
    
    while( <FILE> ) {
        $reponse = $reponse.$_;
    }
    
    close(FILE);
    
    $type = shift;
    $code = shift;
    resp($type, $code);
    writelog("get-s", $ip, $request, $file, $code);
}

# param :
#   - http status
sub resp
{
    $full_response = "HTTP/1.1 ".shift."\r\n" .
        "Content-Type: ".shift."\r\n" .
        "Content-Length: ".length($reponse)."\r\n\r\n" .
        $reponse;
}

# param :
#   - le fils a retirer
sub deleteChild
{
    my $child = shift;
    my @nouv;

    for( my $i=0; $i<scalar(@allPID); $i++)
    {
        push(@nouv, $allPID[$i]) if ($allPID[$i] != $child);
    }
    
    @allPID = @nouv;
}
